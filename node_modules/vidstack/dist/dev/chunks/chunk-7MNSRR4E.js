import { HTMLMediaProvider } from './chunk-XKJJT7VD.js';
import { signal, peek } from 'maverick.js';
import { listenEvent, dispatchEvent, isFunction } from 'maverick.js/std';

function useVideoPresentation(video, { $player, logger, delegate }) {
  const $mode = signal("inline"), $supported = () => isFunction(video.webkitSetPresentationMode);
  if ($supported()) {
    logger?.debug("adding `webkitpresentationmodechanged` listener");
    listenEvent(video, "webkitpresentationmodechanged", onPresentationModeChange);
  }
  function onPresentationModeChange(event) {
    {
      logger?.infoGroup("presentation mode change").labelledLog("Event", event).dispatch();
    }
    $mode.set(video.webkitPresentationMode);
    dispatchEvent($player(), "video-presentation-change", {
      detail: $mode(),
      trigger: event
    });
    delegate.dispatch("fullscreen-change", {
      detail: $mode() === "fullscreen",
      trigger: event
    });
  }
  return {
    get mode() {
      return $mode();
    },
    get active() {
      return $mode() === "fullscreen";
    },
    get supported() {
      return peek($supported);
    },
    async enter() {
      if (peek($mode) === "fullscreen")
        return;
      await video.webkitSetPresentationMode("fullscreen");
    },
    async exit() {
      if (peek($mode) === "inline")
        return;
      await video.webkitSetPresentationMode("inline");
    }
  };
}

// src/player/media/providers/video/provider.ts
var VIDEO_PROVIDER = Symbol("VIDEO_PROVIDER" );
var _a;
var VideoProvider = class extends HTMLMediaProvider {
  constructor(media, context) {
    super(media);
    this[_a] = true;
    this.fullscreen = useVideoPresentation(media, context);
  }
  get type() {
    return "video";
  }
  setup(context) {
    super.setup(context);
    if (this.type === "video")
      context.delegate.dispatch("provider-setup", { detail: this });
  }
  get video() {
    return this._media;
  }
};
_a = VIDEO_PROVIDER;

export { VIDEO_PROVIDER, VideoProvider };
