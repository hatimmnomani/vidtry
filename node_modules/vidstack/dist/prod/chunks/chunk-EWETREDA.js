import { DOMEvent, isNull, deferredPromise } from 'maverick.js/std';

// src/player/media/remote-control.ts
var MediaRemoteControl = class {
  constructor(_logger) {
    this.N = _logger;
    this.l = null;
    this.i = null;
  }
  setTarget(target) {
    this.l = target;
  }
  getPlayer(target) {
    if (this.i)
      return this.i;
    (target ?? this.l)?.dispatchEvent(
      new DOMEvent("find-media-player", {
        detail: (player) => void (this.i = player),
        bubbles: true,
        composed: true
      })
    );
    return this.i;
  }
  setPlayer(player) {
    this.i = player;
  }
  startLoading(trigger) {
    this.d("media-start-loading", trigger);
  }
  play(trigger) {
    this.d("media-play-request", trigger);
  }
  pause(trigger) {
    this.d("media-pause-request", trigger);
  }
  mute(trigger) {
    this.d("media-mute-request", trigger);
  }
  unmute(trigger) {
    this.d("media-unmute-request", trigger);
  }
  enterFullscreen(target, trigger) {
    this.d("media-enter-fullscreen-request", trigger, target);
  }
  exitFullscreen(target, trigger) {
    this.d("media-exit-fullscreen-request", trigger, target);
  }
  seeking(time, trigger) {
    this.d("media-seeking-request", trigger, time);
  }
  seek(time, trigger) {
    this.d("media-seek-request", trigger, time);
  }
  seekToLiveEdge(trigger) {
    this.d("media-live-edge-request", trigger);
  }
  changeVolume(volume, trigger) {
    this.d("media-volume-change-request", trigger, Math.max(0, Math.min(1, volume)));
  }
  resumeUserIdle(trigger) {
    this.d("media-resume-user-idle-request", trigger);
  }
  pauseUserIdle(trigger) {
    this.d("media-pause-user-idle-request", trigger);
  }
  showPoster(trigger) {
    this.d("media-show-poster-request", trigger);
  }
  hidePoster(trigger) {
    this.d("media-hide-poster-request", trigger);
  }
  togglePaused(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.paused)
      this.play(trigger);
    else
      this.pause(trigger);
  }
  toggleMuted(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.muted)
      this.unmute(trigger);
    else
      this.mute(trigger);
  }
  toggleFullscreen(target, trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.fullscreen)
      this.exitFullscreen(target, trigger);
    else
      this.enterFullscreen(target, trigger);
  }
  d(type, trigger, detail) {
    const request = new DOMEvent(type, {
      bubbles: true,
      composed: true,
      detail,
      trigger
    });
    const target = trigger?.target === document || trigger?.target === window || trigger?.target === document.body ? this.l ?? this.getPlayer() : trigger?.target ?? this.l;
    target?.dispatchEvent(request);
  }
  O(method) {
  }
};
function preconnect(url, rel = "preconnect") {
  const exists = document.querySelector(`link[href="${url}"]`);
  if (!isNull(exists))
    return true;
  const link = document.createElement("link");
  link.rel = rel;
  link.href = url;
  link.crossOrigin = "true";
  document.head.append(link);
  return true;
}
var pendingRequests = {};
function loadScript(src) {
  if (pendingRequests[src])
    return pendingRequests[src].promise;
  const promise = deferredPromise(), exists = document.querySelector(`script[src="${src}"]`);
  if (!isNull(exists)) {
    promise.resolve();
    return promise.promise;
  }
  const script = document.createElement("script");
  script.src = src;
  script.onload = () => {
    promise.resolve();
    delete pendingRequests[src];
  };
  script.onerror = () => {
    promise.reject();
    delete pendingRequests[src];
  };
  setTimeout(() => document.head.append(script), 0);
  return promise.promise;
}

export { MediaRemoteControl, loadScript, preconnect };
