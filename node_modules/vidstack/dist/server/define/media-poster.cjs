'use strict';

var element = require('maverick.js/element');
var ssr = require('maverick.js/ssr');
var maverick_js = require('maverick.js');
var std = require('maverick.js/std');

// src/define/media-poster.ts
function preconnect(url, rel = "preconnect") {
  return false;
}
var mediaContext = maverick_js.createContext();
function useMedia() {
  return maverick_js.useContext(mediaContext);
}
var MediaRemoteControl = class {
  constructor(_logger) {
    this._logger = _logger;
    this._target = null;
    this._player = null;
  }
  setTarget(target) {
    this._target = target;
  }
  getPlayer(target) {
    var _a;
    if (this._player)
      return this._player;
    (_a = target ?? this._target) == null ? void 0 : _a.dispatchEvent(
      new std.DOMEvent("find-media-player", {
        detail: (player) => void (this._player = player),
        bubbles: true,
        composed: true
      })
    );
    return this._player;
  }
  setPlayer(player) {
    this._player = player;
  }
  startLoading(trigger) {
    this._dispatchRequest("media-start-loading", trigger);
  }
  play(trigger) {
    this._dispatchRequest("media-play-request", trigger);
  }
  pause(trigger) {
    this._dispatchRequest("media-pause-request", trigger);
  }
  mute(trigger) {
    this._dispatchRequest("media-mute-request", trigger);
  }
  unmute(trigger) {
    this._dispatchRequest("media-unmute-request", trigger);
  }
  enterFullscreen(target, trigger) {
    this._dispatchRequest("media-enter-fullscreen-request", trigger, target);
  }
  exitFullscreen(target, trigger) {
    this._dispatchRequest("media-exit-fullscreen-request", trigger, target);
  }
  seeking(time, trigger) {
    this._dispatchRequest("media-seeking-request", trigger, time);
  }
  seek(time, trigger) {
    this._dispatchRequest("media-seek-request", trigger, time);
  }
  seekToLiveEdge(trigger) {
    this._dispatchRequest("media-live-edge-request", trigger);
  }
  changeVolume(volume, trigger) {
    this._dispatchRequest("media-volume-change-request", trigger, Math.max(0, Math.min(1, volume)));
  }
  resumeUserIdle(trigger) {
    this._dispatchRequest("media-resume-user-idle-request", trigger);
  }
  pauseUserIdle(trigger) {
    this._dispatchRequest("media-pause-user-idle-request", trigger);
  }
  showPoster(trigger) {
    this._dispatchRequest("media-show-poster-request", trigger);
  }
  hidePoster(trigger) {
    this._dispatchRequest("media-hide-poster-request", trigger);
  }
  togglePaused(trigger) {
    const player = this.getPlayer(trigger == null ? void 0 : trigger.target);
    if (!player) {
      return;
    }
    if (player.state.paused)
      this.play(trigger);
    else
      this.pause(trigger);
  }
  toggleMuted(trigger) {
    const player = this.getPlayer(trigger == null ? void 0 : trigger.target);
    if (!player) {
      return;
    }
    if (player.state.muted)
      this.unmute(trigger);
    else
      this.mute(trigger);
  }
  toggleFullscreen(target, trigger) {
    const player = this.getPlayer(trigger == null ? void 0 : trigger.target);
    if (!player) {
      return;
    }
    if (player.state.fullscreen)
      this.exitFullscreen(target, trigger);
    else
      this.enterFullscreen(target, trigger);
  }
  _dispatchRequest(type, trigger, detail) {
    const request = new std.DOMEvent(type, {
      bubbles: true,
      composed: true,
      detail,
      trigger
    });
    const target = (trigger == null ? void 0 : trigger.target) === document || (trigger == null ? void 0 : trigger.target) === window || (trigger == null ? void 0 : trigger.target) === document.body ? this._target ?? this.getPlayer() : (trigger == null ? void 0 : trigger.target) ?? this._target;
    target == null ? void 0 : target.dispatchEvent(request);
  }
  _noPlayerWarning(method) {
  }
};

// src/player/ui/poster/props.ts
var posterProps = {
  alt: {}
};

// src/player/ui/poster/element.tsx
var $$_templ = ["<!$><img", "", ' part="img" />'];
var PosterDefinition = element.defineCustomElement({
  tagName: "media-poster",
  props: posterProps,
  setup({ host, props: { $alt } }) {
    const { $store: $media } = useMedia(), remote = new MediaRemoteControl();
    const $imgSrc = () => $media.canLoad && $media.poster.length ? $media.poster : null, $imgAlt = () => $imgSrc() ? $alt() : null, $imgLoading = maverick_js.signal(true), $imgError = maverick_js.signal(false);
    host.setAttributes({
      "data-loading": $imgLoading,
      "data-hidden": $imgError
    });
    element.onConnect(() => {
      window.requestAnimationFrame(() => {
        if (!$media.canLoad)
          preconnect($media.poster);
      });
      remote.setTarget(host.el);
      remote.hidePoster();
      return () => remote.showPoster();
    });
    maverick_js.effect(() => {
      const isLoading = $media.canLoad && !!$media.poster;
      $imgLoading.set(isLoading);
      $imgError.set(false);
    });
    return () => ssr.$$_ssr($$_templ, ssr.$$_attr("src", $imgSrc), ssr.$$_attr("alt", $imgAlt));
  }
});

// src/define/media-poster.ts
element.registerLiteCustomElement(PosterDefinition);
