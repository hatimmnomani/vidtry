import { $$_attach_declarative_shadow_dom, createServerElement } from './chunks/chunk-VXE7PBU7.js';
import { kebabToPascalCase, kebabToCamelCase } from './chunks/chunk-3ZBTVF5F.js';
import { createElementInstance } from './chunks/chunk-GAIAW3NQ.js';
import { PROPS, SCOPE as SCOPE$1 } from './chunks/chunk-ZWFN6IXV.js';
import { provideContext } from './chunks/chunk-FPYVZR2H.js';
import { getContext, createScope, tick, SCOPE } from '@maverick-js/signals';
import * as React from 'react';
import { renderToStaticMarkup } from 'react-dom/server';

var ReactComputeScopeContext = React.createContext(null);
function WithScope(scope, children) {
  return React.createElement(ReactComputeScopeContext.Provider, { value: scope }, children);
}
function useReactScope() {
  return React.useContext(ReactComputeScopeContext);
}
function useReactContext(context) {
  const scope = useReactScope();
  return React.useMemo(() => {
    return getContext(context.id, scope);
  }, [scope]);
}
function createReactScopeProvider() {
  return ScopeProvider;
}
function createReactContextProvider(context, provide) {
  var _a;
  return _a = class extends ScopeProvider {
  }, _a._context = context, _a._provide = provide, _a;
}
var ScopeProvider = class extends React.Component {
  constructor(props, context) {
    var _a;
    super(props);
    const scope = createScope();
    this._scope = scope;
    if (context)
      context.append(scope);
    const ctor = this.constructor;
    if (ctor._context)
      provideContext(ctor._context, (_a = ctor._provide) == null ? void 0 : _a.call(ctor), scope);
  }
  render() {
    var _a;
    return WithScope(this._scope, (_a = this.props) == null ? void 0 : _a.children);
  }
};
ScopeProvider.contextType = ReactComputeScopeContext;

// src/react/create-react-server-element.ts
var stylesRE = /style="(.*?)"/;
function createReactServerElement(definition) {
  const ServerElement = createServerElement(definition);
  const propDefs = definition.props ?? {};
  return ({ className, style, ...props } = {}) => {
    var _a;
    const host = new ServerElement();
    const _attrs = {};
    const _props = {};
    if (className) {
      host.setAttribute("class", className + "");
    }
    if (style) {
      const markup = renderToStaticMarkup(React.createElement("a", { style }));
      const styles = (_a = markup.match(stylesRE)) == null ? void 0 : _a[1];
      if (styles)
        host.setAttribute("style", styles);
    }
    for (const prop of Object.keys(props)) {
      if (prop in propDefs) {
        _props[prop] = props[prop];
      } else {
        _attrs[prop] = props[prop];
      }
    }
    const parentScope = useReactScope();
    const instance = createElementInstance(definition, {
      props: _props,
      scope: parentScope
    });
    host.attachComponent(instance);
    const innerHTML = host.renderInnerHTML();
    if (host.hasAttribute("style")) {
      _attrs.style = {};
      for (const [name, value] of host.style.tokens) {
        _attrs.style[name.startsWith("--") ? name : kebabToCamelCase(name)] = value;
      }
      host.removeAttribute("style");
    }
    return WithScope(
      instance[SCOPE$1],
      React.createElement(
        definition.tagName,
        {
          ..._attrs,
          ...Object.fromEntries(host.attributes.tokens),
          "mk-d": "",
          "mk-h": ""
        },
        definition.shadowRoot ? React.createElement("template", {
          shadowroot: host.getShadowRootMode(),
          dangerouslySetInnerHTML: { __html: innerHTML }
        }) : React.createElement("shadow-root", {
          dangerouslySetInnerHTML: { __html: innerHTML }
        }),
        props.children,
        React.createElement(() => {
          if (!parentScope)
            host.destroy();
          return null;
        })
      )
    );
  };
}

// src/react/utils.ts
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else {
    ref.current = value;
  }
}

// src/react/create-react-element.ts
function createReactElement(definition, init) {
  return createReactServerElement(definition) ;
}
function createLiteReactElement(definition, init) {
  return createReactServerElement(definition) ;
}
var ReactCustomElement = class extends React.Component {
  constructor() {
    super(...arguments);
    this._element = null;
  }
  componentDidMount() {
    if (!this._element || this._element.instance)
      return;
    $$_attach_declarative_shadow_dom(this._element);
    this._element.onEventDispatch((eventType) => {
      const callbackName = `on${kebabToPascalCase(eventType)}`;
      const callback = this.props[callbackName];
      const ctor = this.constructor;
      ctor._callbacks.set(callbackName, eventType);
      if (callback)
        this._updateEventListener(eventType, callback);
    });
    this._element.attachComponent(this._instance);
  }
  componentWillUnmount() {
    window.requestAnimationFrame(() => {
      if (!this._element)
        this._instance.destroy();
    });
  }
  render() {
    const ctor = this.constructor;
    const { __forwardedRef, className, children, ...restProps } = this.props;
    if (!this._instance) {
      this._listeners = /* @__PURE__ */ new Map();
      this._instance = createElementInstance(ctor._definition, {
        props: this.props,
        scope: this.context
      });
    }
    if (!this._ref || this._forwardedRef !== __forwardedRef) {
      this._ref = (value) => {
        this._element = value;
        if (__forwardedRef)
          setRef(__forwardedRef, value);
        this._forwardedRef = __forwardedRef;
      };
    }
    const props = { class: className, ref: this._ref };
    const $props = this._instance[PROPS];
    for (const prop of Object.keys(restProps)) {
      const value = restProps[prop];
      if (ctor._callbacks.has(prop)) {
        this._updateEventListener(ctor._callbacks.get(prop), value);
      } else if (ctor._props.has(prop)) {
        $props["$" + prop].set(value);
      } else {
        props[prop] = value;
      }
    }
    tick();
    return WithScope(
      this._instance[SCOPE],
      React.createElement(
        ctor._definition.tagName,
        { ...props, "mk-d": true, suppressHydrationWarning: true },
        React.createElement(ShadowRoot, {
          shadow: ctor._definition.shadowRoot
        }),
        children
      )
    );
  }
  _updateEventListener(eventType, listener) {
    let handler = this._listeners.get(eventType);
    if (!this._element || (handler == null ? void 0 : handler.handleEvent) === listener)
      return;
    if (listener) {
      if (!handler) {
        this._listeners.set(eventType, handler = { handleEvent: listener });
        this._element.addEventListener(eventType, handler);
      } else {
        handler.handleEvent = listener;
      }
    } else if (handler) {
      this._listeners.delete(eventType);
      this._element.removeEventListener(eventType, handler);
    }
  }
};
ReactCustomElement._callbacks = /* @__PURE__ */ new Map();
function ShadowRoot(props) {
  return React.createElement(props.shadow ? "template" : "shadow-root", {
    dangerouslySetInnerHTML: { __html: "" },
    suppressHydrationWarning: true
  });
}

export { ReactComputeScopeContext, WithScope, createLiteReactElement, createReactContextProvider, createReactElement, createReactScopeProvider, useReactContext, useReactScope };
