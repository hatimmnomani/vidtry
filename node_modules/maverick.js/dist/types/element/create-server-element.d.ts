import { noop } from '../std/unit';
import { HOST } from './internal';
import type { ElementLifecycleCallback } from './lifecycle';
import type { AnyCustomElement, CustomElementDefinition, CustomElementInstance, HostElement } from './types';
export declare function createServerElement<T extends AnyCustomElement>(definition: CustomElementDefinition<T>): typeof ServerCustomElement<T>;
export interface ServerHTMLElement extends Pick<HTMLElement, 'getAttribute' | 'setAttribute' | 'hasAttribute' | 'removeAttribute' | 'dispatchEvent' | 'addEventListener' | 'removeEventListener'> {
    readonly classList: Pick<HTMLElement['classList'], 'length' | 'add' | 'contains' | 'remove' | 'replace' | 'toggle' | 'toString'>;
    readonly style: Pick<HTMLElement['style'], 'length' | 'getPropertyValue' | 'removeProperty' | 'setProperty'> & {
        toString(): string;
    };
}
declare class ServerCustomElement<T extends AnyCustomElement = AnyCustomElement> implements ServerHTMLElement, HostElement {
    /** @internal */
    [HOST]: boolean;
    keepAlive: boolean;
    static _definition: CustomElementDefinition;
    /** @internal */
    _instance: CustomElementInstance | null;
    /** @internal */
    _ssr?: string;
    /** @internal */
    _rendered: boolean;
    /** @internal */
    _attachCallbacks: Set<ElementLifecycleCallback> | null;
    readonly attributes: Attributes;
    readonly style: Style;
    readonly classList: ClassList;
    get instance(): CustomElementInstance<AnyCustomElement> | null;
    attachComponent(instance: CustomElementInstance): void;
    render(): string;
    renderInnerHTML(): string;
    getShadowRootMode(): ShadowRootMode;
    getAttribute(name: string): string | null;
    setAttribute(name: string, value: string): void;
    hasAttribute(name: string): boolean;
    removeAttribute(name: string): void;
    dispatchEvent(): boolean;
    onEventDispatch(): void;
    addEventListener(): void;
    removeEventListener(): void;
    onAttach(callback: ElementLifecycleCallback): typeof noop;
    destroy(): void;
}
declare class Attributes {
    protected _tokens: Map<string, string>;
    get length(): number;
    get tokens(): Map<string, string>;
    getAttribute(name: string): string | null;
    hasAttribute(name: string): boolean;
    setAttribute(name: string, value: string): void;
    removeAttribute(name: string): void;
    toString(): string;
}
declare class Style {
    protected _tokens: Map<string, string>;
    get length(): number;
    get tokens(): Map<string, string>;
    getPropertyValue(prop: string): string;
    setProperty(prop: string, value: string | null): void;
    removeProperty(prop: string): string;
    toString(): string;
}
declare class ClassList {
    protected _tokens: Set<string>;
    get length(): number;
    get tokens(): Set<string>;
    add(...tokens: string[]): void;
    contains(token: string): boolean;
    remove(token: string): void;
    replace(token: string, newToken: string): boolean;
    toggle(token: string, force?: boolean): boolean;
    toString(): string;
}
export {};
