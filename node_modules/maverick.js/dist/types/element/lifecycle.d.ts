import { ATTACH, CONNECT } from './internal';
export interface ElementLifecycleCallback {
    (): any;
}
export interface ElementLifecycleManager {
    [ATTACH]: ElementLifecycleCallback[];
    [CONNECT]: ElementLifecycleCallback[];
}
/**
 * The given callback is invoked when the component instance has attached to a host element.
 *
 * - This hook will only run once when the component is attached.
 * - This hook may be called while the host element is not connected to the DOM yet.
 * - This hook is called both client-side and server-side.
 */
export declare const onAttach: (callback: ElementLifecycleCallback) => void;
/**
 * The given callback is invoked when the host element has connected to the DOM.
 *
 * - This hook can run more than once as the host disconnects and re-connects to the DOM.
 * - If a function is returned it will be invoked when the host disconnects from the DOM.
 */
export declare const onConnect: (callback: ElementLifecycleCallback) => void;
