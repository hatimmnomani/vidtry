import type { AnyRecord } from './types';
export interface Store<Record extends AnyRecord> {
    initial: Record;
    create(): Record;
    reset(record: Record, filter?: (key: keyof Record) => boolean): void;
}
/**
 * Converts an object into a store. A store stores the initial object and enables producing new
 * objects where each value in the provided object becomes a signal with respective getters
 * and setters for convenient access.
 *
 * @example
 * ```ts
 * const store = createStore({
 *   foo: 0,
 *   bar: '...',
 *   get baz() {
 *     return this.foo + 1;
 *   }
 * });
 *
 * console.log(store.initial); // logs `{ foo: 0, bar: '...' }`
 *
 * const record = store.create();
 * effect(() => console.log(record.foo));
 * // Run effect ^
 * record.foo = 1;
 *
 * // Reset all values
 * store.reset(record);
 * ```
 */
export declare function createStore<Record extends AnyRecord>(initial: Record): Store<Record>;
